{"version":3,"sources":["App.tsx","serviceWorker.js","index.tsx","scss/App.scss"],"names":["App","useState","fontsReady","setFontsReady","useEffect","WebFontLoader","load","custom","families","fontactive","setTimeout","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"4LAiDeA,MArCf,WAAgB,IAAD,EACuBC,oBAAS,GADhC,mBACNC,EADM,KACMC,EADN,KAoBb,OAjBAC,qBAAU,WAERC,IAAcC,KAAK,CACjBC,OAAQ,CACNC,SAAU,CACR,aACA,UAGJC,WAAY,WACVC,YAAW,WACTP,GAAc,KACb,UAGN,IAGD,oCACID,GAAe,oCACf,gCACE,8CAEF,mDAGA,kDC7BYS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,kBExI5BC,EAAOC,QAAU,CAAC,OAAS,oBAAoB,cAAgB,6BAA6B,iBAAmB,gCAAgC,eAAiB,8BAA8B,gBAAkB,+BAA+B,cAAgB,6BAA6B,aAAe,4BAA4B,iBAAmB,iCAAiC,gBAAkB,gCAAgC,eAAiB,+BAA+B,cAAgB,6BAA6B,eAAiB,8BAA8B,eAAiB,8BAA8B,oBAAsB,oCAAoC,cAAgB,6BAA6B,eAAiB,+BAA+B,gBAAkB,gCAAgC,iBAAmB,iCAAiC,aAAe,4BAA4B,cAAgB,8BAA8B,eAAiB,+BAA+B,gBAAkB,gCAAgC,gBAAkB,+BAA+B,iBAAmB,gCAAgC,kBAAoB,mC","file":"static/js/main.7f4e01f9.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport WebFontLoader from \"webfontloader\";\r\n\r\nimport './scss/App.scss';\r\n\r\nimport \"./scss/App.scss\";\r\n\r\n\r\ninterface Props {\r\n  test: string;\r\n}\r\n\r\nfunction App() {\r\n  const [fontsReady, setFontsReady] = useState(false);\r\n\r\n  useEffect(() => {\r\n    // Fetch necessary fonts.\r\n    WebFontLoader.load({\r\n      custom: {\r\n        families: [\r\n          'opensasans',\r\n          'anton'\r\n        ]\r\n      },\r\n      fontactive: () => {\r\n        setTimeout(() => {\r\n          setFontsReady(true);\r\n        }, 1000);\r\n      }\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      { fontsReady && (<>\r\n        <header>\r\n          <h1>Movie Library</h1>\r\n        </header>\r\n        <main>\r\n          Main content here\r\n        </main>\r\n        <footer>\r\n          Footer here\r\n        </footer>\r\n      </>)}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"hidden\":\"App_hidden__aJPTc\",\"linkColorLink\":\"App_link-color-link__3JHiL\",\"linkColorVisited\":\"App_link-color-visited__2TCKx\",\"linkColorHover\":\"App_link-color-hover__3-gY5\",\"linkColorActive\":\"App_link-color-active__1gQe1\",\"fontSizeMicro\":\"App_font-size-micro__24z6y\",\"fontSizeTiny\":\"App_font-size-tiny__35lVx\",\"fontSizeXxxSmall\":\"App_font-size-xxx-small__1XI4L\",\"fontSizeXxSmall\":\"App_font-size-xx-small__2RTZR\",\"fontSizeXSmall\":\"App_font-size-x-small__2DZDQ\",\"fontSizeSmall\":\"App_font-size-small__3BU_b\",\"fontSizeNormal\":\"App_font-size-normal__3YasS\",\"fontSizeMedium\":\"App_font-size-medium__3kH0v\",\"fontSizeMediumLarge\":\"App_font-size-medium-large__2_t2F\",\"fontSizeLarge\":\"App_font-size-large__3aHgx\",\"fontSizeXLarge\":\"App_font-size-x-large__3J0R6\",\"fontSizeXxLarge\":\"App_font-size-xx-large__kZTSX\",\"fontSizeXxxLarge\":\"App_font-size-xxx-large__2pO6w\",\"fontSizeHuge\":\"App_font-size-huge__1Vj15\",\"fontSizeXHuge\":\"App_font-size-x-huge__2tgxX\",\"fontSizeXxHuge\":\"App_font-size-xx-huge__2Vren\",\"fontSizeXxxHuge\":\"App_font-size-xxx-huge__2ZIo8\",\"fontSizeMassive\":\"App_font-size-massive__HgFDH\",\"fontSizeGigantic\":\"App_font-size-gigantic__1WP28\",\"fontSizeHumongous\":\"App_font-size-humongous__24Bz6\"};"],"sourceRoot":""}